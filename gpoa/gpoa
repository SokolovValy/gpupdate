#! /usr/bin/env python3
#
# GPOA - GPO Applier for Linux
#
# Copyright (C) 2019-2020 BaseALT Ltd.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import logging
import os
import signal

from backend import backend_factory
from frontend.frontend_manager import frontend_manager, determine_username
from plugin import plugin_manager

from util.util import get_machine_name
from util.kerberos import (
      machine_kinit
    , machine_kdestroy
)
from util.users import (
    is_root,
    get_process_user
)
from util.arguments import (
    set_loglevel
)
from util.logging import slogm
from util.signals import signal_handler

def parse_arguments():
    arguments = argparse.ArgumentParser(description='Generate configuration out of parsed policies')
    arguments.add_argument('user',
        type=str,
        nargs='?',
        help='Domain username ({}) to parse policies for'.format(get_machine_name()))
    arguments.add_argument('--dc',
        type=str,
        help='FQDN of the domain to replicate SYSVOL from')
    arguments.add_argument('--nodomain',
        action='store_true',
        help='Operate without domain (apply local policy)')
    arguments.add_argument('--noupdate',
        action='store_true',
        help='Don\'t try to update storage, only run appliers')
    arguments.add_argument('--noplugins',
        action='store_true',
        help='Don\'t start plugins')
    arguments.add_argument('--loglevel',
        type=int,
        default=4,
        help='Set logging verbosity level')
    return arguments.parse_args()

class gpoa_controller:
    __kinit_successful = False
    __args = None

    def __init__(self):
        self.__args = parse_arguments()
        self.is_machine = False
        if not self.__args.user:
            user = get_machine_name()
            self.is_machine = True
        set_loglevel(self.__args.loglevel)
        self.cache_path = '/var/cache/gpupdate/creds/krb5cc_{}'.format(os.getpid())

        uname = get_process_user()
        uid = os.getuid()
        logging.debug(slogm('The process was started for user {} with UID {}'.format(uname, uid), uid=uid))

        if not is_root():
            self.username = uname
        else:
            self.username = determine_username(self.__args.user)

    def run(self):
        '''
        GPOA controller entry point
        '''
        self.__kinit_successful = machine_kinit(self.cache_path)
        if self.__kinit_successful:
            os.environ['KRB5CCNAME'] = 'FILE:{}'.format(self.cache_path)
        self.start_plugins()
        self.start_backend()
        self.start_frontend()
        if self.__kinit_successful:
            machine_kdestroy()

    def start_backend(self):
        '''
        Function to start update of settings storage
        '''
        dc = self.__args.dc
        nodomain = False
        if self.__args.nodomain:
            nodomain = True

        if not self.__args.noupdate:
            if is_root():
                back = backend_factory(dc, self.username, self.is_machine, nodomain)
                if back:
                    try:
                        back.retrieve_and_store()
                    except Exception as exc:
                        logging.error(slogm('Backend execution error: {}'.format(str(exc))))

    def start_frontend(self):
        '''
        Function to start appliers
        '''
        try:
            appl = frontend_manager(self.username, self.is_machine)
            appl.apply_parameters()
        except Exception as exc:
            logging.error(slogm('Error occured while running applier: {}'.format(exc)))

    def start_plugins(self):
        '''
        Function to start supplementary facilities
        '''
        if not self.__args.noplugins:
            pm = plugin_manager()
            pm.run()

def main():
    controller = gpoa_controller()
    controller.run()

if __name__ == "__main__":
    default_handler = signal.getsignal(signal.SIGINT)
    signal.signal(signal.SIGINT, signal_handler)
    main()

