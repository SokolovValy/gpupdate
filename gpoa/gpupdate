#! /usr/bin/env python3
#
# Copyright (C) 2019-2020 BaseALT Ltd.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


import argparse

import subprocess
import os
import sys
import logging
import pwd

from util.users import (
    is_root
)
from util.dbus import (
    is_oddjobd_gpupdate_accessible,
    dbus_runner
)

logging.basicConfig(level=logging.DEBUG)

class file_runner:
    _gpoa_exe = '/usr/sbin/gpoa'

    def __init__(self, username=None):
        self._user = username

    def run(self):
        '''
        Call gpoa utility to generate scripts
        '''
        gpoa_cmd = [self._gpoa_exe]
        if self._user:
            gpoa_cmd += [self._user]

        output = subprocess.call(gpoa_cmd)
        sys.exit(output)

def parse_cli_arguments():
    '''
    Command line argument parser
    '''
    argparser = argparse.ArgumentParser(description='Update group policies for the specified user')
    argparser.add_argument('-u',
        '--user',
        default=None,
        help='Name of the user for GPO update')

    return argparser.parse_args()

def runner_factory(args):
    '''
    Return the necessary runner class according to some
    factors taken into account.
    '''
    username = None
    if is_root():
        # Only root may specify any username to update.
        try:
            username = pwd.getpwnam(args.user).pw_name
        except:
            username = None
            logstring = (
                'Unable to perform gpupdate for non-existent user {},'
                ' will update machine settings'
            )
            logging.error(logstring.format(args.user))
    else:
        # User may only perform gpupdate for machine (None) or
        # itself (os.getusername()).
        if args.user:
            username = pwd.getpwuid(os.getuid()).pw_name
            if args.user != username:
                logstring = (
                    'Unable to perform gpupdate for {} with current'
                    ' permissions, will update current user settings'
                )
                logging.error(logstring.format(args.user))

    if is_oddjobd_gpupdate_accessible():
        logging.debug('Starting gpupdate via D-Bus')
        return dbus_runner(username)
    else:
        logging.warning('oddjobd is inaccessible')

    if is_root():
        logging.debug('Starting gpupdate by command invocation')
        return file_runner(username)
    else:
        logging.error('Insufficient permissions to run gpupdate')

    return None

def main():
    args = parse_cli_arguments()
    gpo_applier = runner_factory(args)
    if gpo_applier:
        gpo_applier.run()
    else:
        logging.error('gpupdate will not be started')

if __name__ == '__main__':
    main()

