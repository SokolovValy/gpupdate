#! /usr/bin/env python3
#
# GPOA - GPO Applier for Linux
#
# Copyright (C) 2019-2020 BaseALT Ltd.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse

import subprocess
import os
import sys
import logging
import pwd

from util.users import (
    is_root
)
from util.arguments import (
    process_target
)
from util.dbus import (
    is_oddjobd_gpupdate_accessible,
    dbus_runner
)

logging.basicConfig(level=logging.DEBUG)

class file_runner:
    _gpoa_exe = '/usr/sbin/gpoa'

    def __init__(self, username=None):
        self._user = username

    def run(self):
        '''
        Call gpoa utility to generate scripts
        '''
        gpoa_cmd = [self._gpoa_exe]
        if self._user:
            gpoa_cmd += [self._user]

        output = subprocess.call(gpoa_cmd)
        sys.exit(output)

def parse_cli_arguments():
    '''
    Command line argument parser
    '''
    argparser = argparse.ArgumentParser(description='Update group policies for the specified user')
    argparser.add_argument('-u',
        '--user',
        default=None,
        help='Name of the user for GPO update')
    argparser.add_argument('--target',
        default=None,
        type=str,
        help='Specify if it is needed to update user\'s or computer\'s policies')

    return argparser.parse_args()

def runner_factory(args, target):
    '''
    Return the necessary runner class according to some
    factors taken into account.
    '''
    username = None
    if is_root():
        # Only root may specify any username to update.
        try:
            username = pwd.getpwnam(args.user).pw_name
        except:
            username = None
            logstring = (
                'Unable to perform gpupdate for non-existent user {},'
                ' will update machine settings'
            )
            logging.error(logstring.format(args.user))
    else:
        # User may only perform gpupdate for machine (None) or
        # itself (os.getusername()).
        username = pwd.getpwuid(os.getuid()).pw_name
        if args.user != username:
            logstring = (
                'Unable to perform gpupdate for {} with current'
                ' permissions, will update current user settings'
            )
            logging.error(logstring.format(args.user))

    if is_oddjobd_gpupdate_accessible():
        logging.debug('Starting gpupdate via D-Bus')
        computer_runner = None
        user_runner = None
        if target == 'All' or target == 'Computer':
            computer_runner = dbus_runner()
        if username:
            if target == 'All' or target == 'User':
                user_runner = dbus_runner(username)
        return (computer_runner, user_runner)
    else:
        logging.warning('oddjobd is inaccessible')

    if is_root():
        logging.debug('Starting gpupdate by command invocation')
        computer_runner = None
        user_runner = None
        if target == 'All' or target == 'Computer':
            computer_runner = file_runner()
        if target == 'All' or target == 'User':
            user_runner = file_runner(username)
        return (computer_runner, user_runner)
    else:
        logging.error('Insufficient permissions to run gpupdate')

    return None

def main():
    args = parse_cli_arguments()
    gpo_appliers = runner_factory(args, process_target(args.target))
    if gpo_appliers:
        if gpo_appliers[0]:
            gpo_appliers[0].run()
        if gpo_appliers[1]:
            gpo_appliers[1].run()
    else:
        logging.error('gpupdate will not be started')

if __name__ == '__main__':
    main()

