#! /usr/bin/env python3
#
# GPOA - GPO Applier for Linux
#
# Copyright (C) 2019-2020 BaseALT Ltd.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


import os
import sys
import argparse
import subprocess

import re

from util.samba import smbopts
from util.util import runcmd


def command(args):
    try:
        subprocess.check_call(args.split())
    except:
        print ('command: \'%s\' error' % args)

def from_command(args):
    try:
        with subprocess.Popen(args.split(), stdout=subprocess.PIPE) as proc:
            value = proc.stdout.readline().decode('utf-8')
            proc.wait()
    except:
        print ('from_command: \'%s\' error' % args)
        return 'local'

    return value.strip()

def get_default_policy_name():
    localpolicy = 'workstation'
    dcpolicy = 'ad-domain-controller'

    try:
        if smbopts().get_server_role() == 'active directory domain controller':
            return dcpolicy
    except:
        pass

    try:
        release = '/etc/altlinux-release'
        if os.path.isfile(release):
            f = open(release)
            s = f.readline()
            if re.search('server', s, re.I):
                localpolicy = 'server'
    except:
        pass

    return localpolicy

def get_backends():
    command = ['/usr/sbin/gpoa', '--list-backends']
    backends = list()
    out = list()

    with subprocess.Popen(command, stdout=subprocess.PIPE) as proc:
        out = proc.stdout.read().decode('utf-8')
        proc.wait()
    for line in out:
        backends.append(line.replace('\n', ''))

    return backends

def parse_arguments():
    '''
    Parse CLI arguments.
    '''
    parser = argparse.ArgumentParser(prog='gpupdate-setup')
    subparsers = parser.add_subparsers(dest='action',
        metavar='action',
        help='Group Policy management actions (default action is status)')

    parser_list = subparsers.add_parser('list',
        help='List avalable types of local policy')
    parser_list = subparsers.add_parser('list-backends',
        help='Show list of available backends')
    parser_status = subparsers.add_parser('status',
        help='Show current Group Policy status')
    parser_enable = subparsers.add_parser('enable',
        nargs='?',
        default='samba',
        const='samba',
        choices=['local', 'samba', 'freeipa'],
        help='Enable Group Policy subsystem')
    parser_disable = subparsers.add_parser('disable',
        help='Disable Group Policy subsystem')
    parser_write = subparsers.add_parser('write',
        help='Operate on Group Policies (enable or disable)')
    parser_default = subparsers.add_parser('default-policy',
        help='Show name of default policy')
    parser_active = subparsers.add_parser('active-policy',
        help='Show name of policy enabled')

    parser_write.add_argument('status',
        choices=['enable', 'disable'],
        help='Enable or disable Group Policies')
    parser_write.add_argument('localpolicy',
        default=None,
        nargs='?',
        help='Name of local policy to enable')

    parser_enable.add_argument('localpolicy',
        default=None,
        nargs='?',
        help='Name of local policy to enable')

    return parser.parse_args()

def get_policy_entries(directory):
    '''
    Get list of directories representing "Local Policy" templates.
    '''
    filtered_entries = list()
    if os.path.isdir(directory):
        entries = [os.path.join(directory, entry) for entry in os.listdir(directory)]

        for entry in entries:
            if os.path.isdir(os.path.join(entry)):
                if not os.path.islink(os.path.join(entry)):
                    if not entry.rpartition('/')[2] == 'default':
                        filtered_entries.append(entry)

    return filtered_entries


def get_policy_variants():
    '''
    Get the list of local policy variants deployed on this system.
    Please note that is case overlapping names the names in
    /etc/local-policy must override names in /usr/share/local-policy
    '''
    policy_dir = '/usr/share/local-policy'
    etc_policy_dir = '/etc/local-policy'

    system_policies = get_policy_entries(policy_dir)
    user_policies = get_policy_entries(etc_policy_dir)

    general_listing = list()
    general_listing.extend(system_policies)
    general_listing.extend(user_policies)

    return general_listing

def validate_policy_name(policy_name):
    return policy_name in [os.path.basename(d) for d in get_policy_variants()]

def get_status():
    systemd_unit_link = '/etc/systemd/system/multi-user.target.wants/gpupdate.service'

    return os.path.islink(systemd_unit_link)

def get_active_policy_name():
    etc_policy_dir = '/etc/local-policy'
    actual_policy_name = 'unknown'

    active_policy_path = os.path.join(etc_policy_dir, 'active')

    if os.path.islink(active_policy_path):
        active_policy_path = os.path.realpath(active_policy_path)

    if os.path.isdir(active_policy_path):
        actual_policy_name = os.path.basename(active_policy_path)

    return actual_policy_name

def rollback_on_error(command_name):
    if 0 != runcmd(command_name)[0]:
        disable_gp()
        return False
    return True

def disable_gp():
    cmd_set_global_policy = ['/usr/sbin/control', 'system-policy', 'global']
    cmd_set_local_policy = ['/usr/sbin/control', 'system-policy', 'local']
    cmd_disable_gpupdate_service = ['/bin/systemctl', 'disable', 'gpupdate.service']
    cmd_disable_gpupdate_user_service = ['/bin/systemctl', '--global', 'disable', 'gpupdate-user.service']

    if from_command('/usr/sbin/control system-auth') != 'local':
        runcmd(cmd_set_global_policy)
    else:
        runcmd(cmd_set_local_policy)
    runcmd(cmd_disable_gpupdate_service)
    runcmd(cmd_disable_gpupdate_user_service)

def enable_gp(policy_name):
    policy_dir = '/usr/share/local-policy'
    etc_policy_dir = '/etc/local-policy'
    cmd_set_gpupdate_policy = ['/usr/sbin/control', 'system-policy', 'gpupdate']
    cmd_gpoa_nodomain = ['/usr/sbin/gpoa', '--nodomain', '--loglevel 5']
    cmd_enable_gpupdate_service = ['/bin/systemctl', 'enable', 'gpupdate.service']
    cmd_enable_gpupdate_user_service = ['/bin/systemctl', '--global', 'enable', 'gpupdate-user.service']

    target_policy_name = get_default_policy_name()
    if policy_name:
        if validate_policy_name(policy_name):
            target_policy_name = policy_name

    print (target_policy_name)
    default_policy_name = os.path.join(policy_dir, target_policy_name)
    active_policy_name = os.path.join(etc_policy_dir, 'active')

    if not os.path.isdir(etc_policy_dir):
        os.makedirs(etc_policy_dir)

    if not os.path.islink(active_policy_name):
        os.symlink(default_policy_name, active_policy_name)
    else:
        os.unlink(active_policy_name)
        os.symlink(default_policy_name, active_policy_name)

    # Enable oddjobd_gpupdate in PAM config
    rollback_on_error(cmd_set_gpupdate_policy)
    # Bootstrap the Group Policy engine
    rollback_on_error(cmd_gpoa_nodomain):
    # Enable gpupdate.service
    rollback_on_error(cmd_enable_gpupdate_service)
    # Enable gpupdate-setup.service for all users
    rollback_on_error(cmd_enable_gpupdate_user_service)

def main():
    arguments = parse_arguments()

    if arguments.action == 'list':
        for entry in get_policy_variants():
            print(entry.rpartition('/')[2])
        return

    if arguments.action == 'list-backends':
        backends = get_backends()
        for backend in backends:
            print(backend)
        return

    if arguments.action == 'status' or arguments.action == None:
        if get_status():
            print('enabled')
        else:
            print('disabled')
            return

    if arguments.action == 'write':
        if arguments.status == 'enable' or arguments.status == '#t':
            enable_gp(arguments.localpolicy)
        if arguments.status == 'disable' or arguments.status == '#f':
            disable_gp()
        return

    if arguments.action == "enable":
        enable_gp(arguments.localpolicy)
        return

    if arguments.action == "disable":
        disable_gp()
        return

    if arguments.action == 'active-policy':
        print(get_active_policy_name())
        return

    if arguments.action == 'default-policy':
        print(get_default_policy_name())
        return

if __name__ == '__main__':
    main()

