#! /usr/bin/env python3

import argparse

import subprocess
import threading

import os
import errno

import tempfile
import shutil

import socket
import sys
import re

class gpoa:
    _gpoa_exe = '/usr/sbin/gpoa'

    def __init__(self, username):
        self._user = username

    def run(self):
        '''
        Call gpoa utility to generate scripts
        '''
        gpoa_cmd = [self._gpoa_exe, self._user]

        print('Running gpoa')
        output = subprocess.call(gpoa_cmd)
        sys.exit(output)


def parse_cli_arguments():
    '''
    Command line argument parser
    '''
    argparser = argparse.ArgumentParser(description='Update group policies for the specified user')
    argparser.add_argument('-u',
        '--user',
        default='Administrator',
        help='Name of the user for GPO update')
    argparser.add_argument('-d',
        '--domain',
        help='Name of the AD domain for replication')
    argparser.add_argument('-c',
        '--controller',
        help='AD controller to connect to')
    argparser.add_argument('-p',
        '--password',
        help='Kerberos 5 password for the specified user')
    argparser.add_argument('-i',
        '--sid',
        help='Specify SID for User target')
    argparser.add_argument('-t',
        '--target',
        default='User',
        help='Computer or User')
    argparser.add_argument('-f',
        '--force',
        help='Reapply all policy settings')
    argparser.add_argument('-w',
        '--wait',
        default=600,
        help='Wait for specified number of seconds')
    argparser.add_argument('-l',
        '--logoff',
        help='Force logoff after settings are applied')
    argparser.add_argument('-b',
        '--boot',
        help='Force reboot after settings are applied')
    argparser.add_argument('-s',
        '--sync',
        help='Perform next GPO application synchronously')

    return argparser.parse_args()

def main():
    args = parse_cli_arguments()

    gpo_applier = gpoa(args.user)
    gpo_applier.run()

if __name__ == '__main__':
    main()

